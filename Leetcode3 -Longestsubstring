Given a string s, find the length of the longest substring without repeating characters.
Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.

 #include <stdio.h>
#include <string.h>

int lengthOfLongestSubstring(char *s);

int main() {
    char s[1000]; // Array to store the input string

    printf("Enter the string: ");
    scanf("%s", s); // Read the input string from the user

    int result = lengthOfLongestSubstring(s);
    printf("The length of the longest substring without repeating characters is: %d\n", result);

    return 0;
}

int lengthOfLongestSubstring(char *s) {
    int seen[256]; // Array to store last seen index of characters (assuming ASCII characters)
    for (int i = 0; i < 256; i++) {
        seen[i] = -1; // Initialize all characters as not seen
    }

    int l = 0; // Left pointer
    int length = 0; // Maximum length of substring without repeating characters

    for (int r = 0; s[r] != '\0'; r++) { // Iterate over the string
        char char_r = s[r]; // Current character

        if (seen[(int)char_r] >= l) { // Character is repeated and inside the current window
            l = seen[(int)char_r] + 1; // Move the left pointer
        }

        length = (length > (r - l + 1)) ? length : (r - l + 1); // Update the maximum length
        seen[(int)char_r] = r; // Update the last seen index of the current character
    }

    return length; // Return the maximum length found
}
